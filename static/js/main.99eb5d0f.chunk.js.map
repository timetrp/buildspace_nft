{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","Loading","className","App","useState","currentAccount","setCurrentAccount","isMinting","setIsMinting","nftMintedCount","setNftMintedCount","getInitialCount","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","getMintedCount","mintedCount","toNumber","checkIfWalletIsConnected","console","log","isOnRinkedby","request","method","accounts","length","account","setupEventListener","on","from","tokenId","alert","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","chainId","connectWallet","useEffect","onClick","href","target","rel","alt","src","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99eb5d0f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport './styles/App.css';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport myEpicNft from './utils/MyEpicNFT.json';\r\nimport { ethers, ethereum} from \"ethers\";\r\n\r\nconst TWITTER_HANDLE = 'kuulatte1';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/donutnft-rmddkrayzo';\r\nconst TOTAL_MINT_COUNT = 50;\r\nconst CONTRACT_ADDRESS = \"0xB141B4D214Fb702c95AD17Dcf672682B2BD71d68\";\r\n\r\nconst Loading = () => (<div className=\"lds-ring\">\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n  <div></div>\r\n</div>)\r\nconst App = () => {\r\n\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [nftMintedCount, setNftMintedCount] = useState(0);\r\n\r\n  const getInitialCount = async () => {\r\n    const { ethereum } = window;\r\n\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n\r\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\r\n\r\n    let mintedCount = await connectedContract.getMintedCount();\r\n    setNftMintedCount(mintedCount.toNumber());\r\n  }\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const isOnChain = isOnRinkedby();\r\n\r\n    if(!isOnChain){\r\n      return;\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)\r\n\r\n      setupEventListener();\r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n  }\r\n\r\n  // Setup our listener.\r\n  const setupEventListener = async () => {\r\n    // Most of this looks the same as our function askContractToMintNft\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        // Same stuff again\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\r\n\r\n        // THIS IS THE MAGIC SAUCE.\r\n        // This will essentially \"capture\" our event when our contract throws it.\r\n        // If you're familiar with webhooks, it's very similar to that!\r\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\r\n          console.log(from, tokenId.toNumber())\r\n          setNftMintedCount(tokenId.toNumber())\r\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\r\n        });\r\n\r\n        console.log(\"Setup event listener!\")\r\n\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      const isOnChain = await isOnRinkedby();\r\n\r\n      if(!isOnChain) {\r\n        return;\r\n      }\r\n\r\n      setIsMinting(true);\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\r\n\r\n        console.log(\"Going to pop wallet now to pay gas...\")\r\n        let nftTxn = await connectedContract.makeAnEpicNFT();\r\n\r\n        console.log(\"Mining...please wait.\")\r\n        await nftTxn.wait();\r\n\r\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\r\n\r\n\r\n\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n    setIsMinting(false);\r\n  }\r\n\r\n  const isOnRinkedby = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      let chainId = await ethereum.request({ method: 'eth_chainId' });\r\n      console.log(\"Connected to chain \" + chainId);\r\n\r\n// String, hex code of the chainId of the Rinkebey test network\r\n      const rinkebyChainId = \"0x4\";\r\n      if (chainId !== rinkebyChainId) {\r\n        alert(\"You are not connected to the Rinkeby Test Network!\");\r\n        return false;\r\n      }\r\n\r\n    }catch (e){\r\n      console.log(e)\r\n    }\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n  /*\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const isOnChain = await isOnRinkedby();\r\n      if(!isOnChain) return;\r\n\r\n      /*\r\n      * Fancy method to request access to account.\r\n      */\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      /*\r\n      * Boom! This should print out public address once we authorize Metamask.\r\n      */\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n      setupEventListener();\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // Render Methods\r\n  const renderNotConnectedContainer = () => (\r\n      <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n        Connect to Wallet\r\n      </button>\r\n  );\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getInitialCount();\r\n  }, [])\r\n\r\n  /*\r\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\r\n  */\r\n  return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <div className=\"header-container\">\r\n            <p className=\"header gradient-text\">My NFT Collection</p>\r\n            <p className=\"sub-text\">\r\n              Each unique. Each beautiful. Discover your NFT today.\r\n            </p>\r\n            {currentAccount === \"\" ? (\r\n                renderNotConnectedContainer()\r\n            ) : (isMinting?\r\n                (<div>\r\n                  <Loading />\r\n                </div>)\r\n                :(<button onClick={askContractToMintNft} className={`cta-button connect-wallet-button ${isMinting && 'loading'}`}>\r\n                    Mint NFT\r\n                  </button>)\r\n            )}\r\n            <a\r\n                className=\"footer-text width-100\"\r\n                href={OPENSEA_LINK}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n            >\r\n              <button  className=\"cta-button connect-wallet-button\" >\r\n                🌊 View Collection on OpenSea\r\n              </button>\r\n            </a>\r\n\r\n          </div>\r\n          <p className=\"sub-text\">\r\n            ${nftMintedCount}/50 nft minted\r\n          </p>\r\n          <div className=\"footer-container\">\r\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n            <a\r\n                className=\"footer-text\"\r\n                href={TWITTER_LINK}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n            >{`built on @${TWITTER_HANDLE}`}</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}